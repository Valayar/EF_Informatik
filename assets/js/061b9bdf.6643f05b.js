"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[846],{7384:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/Erstellen einer API mit Node-RED","metadata":{"permalink":"/EF_Informatik/Erstellen einer API mit Node-RED","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/Erstellen einer API mit Node-RED.md","source":"@site/blog/Erstellen einer API mit Node-RED.md","title":"Erfahrungen zum Erstellen einer API mit Node-RED","description":"Postman","date":"2024-01-25T20:49:42.000Z","formattedDate":"25. Januar 2024","tags":[],"readingTime":1.325,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Wiedereinstieg in Python","permalink":"/EF_Informatik/Wiedereinstieg in Python"}},"content":"## Postman\\nPostman ist ein Programm, welches daf\xfcr genutzt wird um HTTP Anfragen zu \xfcberpr\xfcfen. Diese Technik wird ben\xf6tigt, falls man daran ist eine Webseite zu Programmieren und wissen muss was der Webserver als Antwort zur\xfcckgibt. So kann man testen ob alles Ordnungsgem\xe4ss funktioniert. Diese Technik wird auch ben\xf6tigt falls man eine API programmiert/entwickelt. (Stichwort Bugfixing) Ich bin mir hierbei zwar nicht ganz sicher, aber ich glaube, dass man diese Technik ben\xf6tigt, falls eine Webseite down ist und den genauen/ungef\xe4hren Fehler zu ermitteln. \\n\\nIn unserem Beispiel haben wir mit Postman genutzt um auf unsere mit Node-RED erstellte API zuzugreifen.\\n\\n**Warum Ben\xf6tigt man Postman eigentlich?**\\nMan kann genauso die gew\xfcnschte Webadresse auch in einen Browser eingeben, und erh\xe4lt dasselbe Resultat. \\n\\n*Der Grund daf\xfcr ist dieser: Wenn man es offline oder lokal ausprobieren m\xf6chte muss man Postman verwenden. Node-RED ist nach mir eine Ausnahme*\\n\\n## Node-RED\\nAuf Node-RED besteht die von uns erstellte API aus verschiedenen \\"Workflows\\". In diesen Flows haben wir verschiedene Bausteine mit verschiedenen Funktionen aneinandergeh\xe4ngt. Durch das aneinanderh\xe4ngen dieser Funktionen wird die API programmiert. Allgemein wichtig ist der HTTP input sowie der HTTP output. So k\xf6nnen wir mit unserer \\"simulierten Webseite\\" kommunizieren. In der Konsole von Node-RED sollten wir auch Auslesen k\xf6nnen falls jemand unsere Webseite aufgerufen hat. Im Allgemeinen sollten wir auch nichts ausser dem Statuscode 200 von dieser \\"Webseite\\" erhalten. Dadurch wissen wir auch, dass alles funktioniert. Falls die Webseite nun auch eine Funktion haben soll kann man diese zwischen dem In und Output einf\xfcgen. Diese Funktion k\xf6nnen wir nun mit Java script Code f\xfcttern um unserer API eine Funktion zu geben."},{"id":"/Wiedereinstieg in Python","metadata":{"permalink":"/EF_Informatik/Wiedereinstieg in Python","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/Wiedereinstieg in Python.md","source":"@site/blog/Wiedereinstieg in Python.md","title":"Wiedereinstieg in Python","description":"* Sehr Wichtig!","date":"2024-01-25T20:49:42.000Z","formattedDate":"25. Januar 2024","tags":[],"readingTime":0.14,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Erfahrungen zum Erstellen einer API mit Node-RED","permalink":"/EF_Informatik/Erstellen einer API mit Node-RED"},"nextItem":{"title":"Arbeit an NumTrip","permalink":"/EF_Informatik/NumTrip game Blog/Arbeit an NumTrip"}},"content":"* Sehr Wichtig!\\n\\n![image](images/meme.png)\\n * Repeat = for i in range(n)\\n\\n```py\\nforward(n) fd(n)\u200b\\n\\nbackward(n) back(n) bk(n)\u200b\\n\\nleft(angle) lt(angle)\u200b\\n\\nright(angle) rt(angle)\u200b\\n\\ngoto(x, y)\u200b\\n\\nhome()\u200b\\n\\nsetheading(to_angle) seth(to_angle)\u200b\\n```\\n\\n---"},{"id":"/NumTrip game Blog/Arbeit an NumTrip","metadata":{"permalink":"/EF_Informatik/NumTrip game Blog/Arbeit an NumTrip","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/NumTrip game Blog/Arbeit an NumTrip.md","source":"@site/blog/NumTrip game Blog/Arbeit an NumTrip.md","title":"Arbeit an NumTrip","description":"Floodfill","date":"2024-01-25T20:49:42.000Z","formattedDate":"25. Januar 2024","tags":[],"readingTime":1.7,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Wiedereinstieg in Python","permalink":"/EF_Informatik/Wiedereinstieg in Python"},"nextItem":{"title":"Datenstruktur NumTrip","permalink":"/EF_Informatik/NumTrip game Blog/Datenstruktur Numtrip"}},"content":"# Nachbarzellen Kombinieren\\n\\n **Floodfill**\\n\\nDas Prinzip einer Floodfill funktion ist ja noch relativ einfach zu verstehen. Wie diese in der Programmierspache implementiert wird, ist eine andere Sache. zun\xe4chst hatte ich mir den zugeh\xf6renden Wikipediaeintrag dazu angeschaut. \\n\\njedoch konnte ich mir den unterschied von diesen zwei Codebl\xf6cken nicht erkl\xe4ren.\\n\\n\\n```py\\ndef fill4(x, y, alteFarbe, neueFarbe):\\n    if getPixel(x, y) == alteFarbe:\\n        setPixel(x, y, neueFarbe)\\n        fill4(x, y + 1, alteFarbe, neueFarbe)  # unten\\n        fill4(x, y - 1, alteFarbe, neueFarbe)  # oben\\n        fill4(x + 1, y, alteFarbe, neueFarbe)  # rechts\\n        fill4(x - 1, y, alteFarbe, neueFarbe)  # links\\n```\\n\\n```py\\ndef fill4(x, y, alteFarbe, neueFarbe):\\n    stack.push(x, y)\\n    while stack.isNotEmpty():\\n        (x, y) = stack.pop()\\n        if getPixel(x, y) == alteFarbe:\\n            setPixel(x, y, neueFarbe)\\n            stack.push(x, y + 1)\\n            stack.push(x, y - 1)\\n            stack.push(x + 1, y)\\n            stack.push(x - 1, y)\\n```\\n\\nDer obere ist ganz allgemein, der andere ist prim\xe4r f\xfcr Phyton. \\n\\nIch habe mir noch ein noch ein Praxisbeispiel zum Floodfill-Algorythmus angeschaut. \\nDurch dieses habe ich die Anwendung besser verstehen k\xf6nnen. \\n\\n```py\\ndef flood_fill(x ,y, old, new):\\n    # we need the x and y of the start position, the old value,\\n    # and the new value\\n    # the flood fill has 4 parts\\n    # firstly, make sure the x and y are inbounds\\n    if x < 0 or x >= len(field[0]) or y < 0 or y >= len(field):\\n        return\\n    # secondly, check if the current position equals the old value\\n    if field[y][x] != old:\\n        return\\n    \\n    # thirdly, set the current position to the new value\\n    field[y][x] = new\\n    # fourthly, attempt to fill the neighboring positions\\n    flood_fill(x+1, y, old, new)\\n    flood_fill(x-1, y, old, new)\\n    flood_fill(x, y+1, old, new)\\n    flood_fill(x, y-1, old, new)\\n```\\nDieses Beispiel l\xf6st das Problem des oberen Algorythmus welcher nicht erkennt kann ob man sich innerhalb des Feldes befindet. Weil sobald ein Feld ausserhalb der Liste ver\xe4ndert werden soll, bekommen wir die Fehlermeldung: **IndexError: list index out of range** \\n\\nIch habe diesen Beispielscode modifiziert und in meinem NumTrip Game implementiert. \\n\\nQuellenangaben:  \\n[Wikipediaeintrag Floodfill](https://de.wikipedia.org/wiki/Floodfill)  \\n[A Python Example of the Flood Fill Algorithm\\n](https://python.plainenglish.io/a-python-example-of-the-flood-fill-algorithm-bced7f96f569)"},{"id":"/NumTrip game Blog/Datenstruktur Numtrip","metadata":{"permalink":"/EF_Informatik/NumTrip game Blog/Datenstruktur Numtrip","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/NumTrip game Blog/Datenstruktur Numtrip.md","source":"@site/blog/NumTrip game Blog/Datenstruktur Numtrip.md","title":"Datenstruktur NumTrip","description":"Das Spielfeld besteht aus einer Liste, in welcher Weitere Listen die","date":"2024-01-25T20:49:42.000Z","formattedDate":"25. Januar 2024","tags":[],"readingTime":0.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Arbeit an NumTrip","permalink":"/EF_Informatik/NumTrip game Blog/Arbeit an NumTrip"},"nextItem":{"title":"Finaler Blogeintrag","permalink":"/EF_Informatik/NumTrip game Blog/Finaler Blogeintag"}},"content":"**Das Spielfeld besteht aus einer Liste, in welcher Weitere Listen die\\njeweiligen Zeilen und Spalten definieren.\\nwir H\xe4tten insgesamt eine 3 Dimensionale Listen bei der in der letzten Liste eine \\nZahl den Wert des Blockes (Feldes) definiert.**\\n\\nJe nach Wert des jeweiligen Feldes k\xf6nnen wir Farbe duch eine vordefinierung\\n(andere Funktion) definieren.\\n\\n![image](images/Datenstrucktur.jpg)\\n\\n---"},{"id":"/NumTrip game Blog/Finaler Blogeintag","metadata":{"permalink":"/EF_Informatik/NumTrip game Blog/Finaler Blogeintag","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/NumTrip game Blog/Finaler Blogeintag.md","source":"@site/blog/NumTrip game Blog/Finaler Blogeintag.md","title":"Finaler Blogeintrag","description":"Ziel des Spiels/Projekts","date":"2024-01-25T20:49:42.000Z","formattedDate":"25. Januar 2024","tags":[],"readingTime":3.155,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Datenstruktur NumTrip","permalink":"/EF_Informatik/NumTrip game Blog/Datenstruktur Numtrip"},"nextItem":{"title":"Top down entwurf NumTrip","permalink":"/EF_Informatik/NumTrip game Blog/Top down entwurf Numtrip"}},"content":"## Ziel des Spiels/Projekts\\nNumTrip ist ein simples python-Konsolen Spiel. Wir haben ein Spielfeld welches aus 5x5 Feldern mit veschiedenen Zahlen(Werten) besteht. Felder, welche ein angernzendes Feld mit derselben Zahl haben kann man ausw\xe4hlen und der Wert im ausgew\xe4hlten Feld verdoppelt sich. Die angrenzenden Felder werden geelert und mit zuf\xe4lligen neuen gef\xfcllt. Man gewinnt das Spiel indem man einen bestimmten wert Erreicht ohne das einem die M\xf6glichkeiten weitere Z\xfcge zu machen ausgehen. Falls du fragen hast, probiel das Spiel doch einfach aus. \\n\\n## Was wird zum spielen des Spieles ben\xf6tigt:\\nDamit du das Spiel auch spielen kannst, ben\xf6tigst du eine Phyton Konsole, auf welcher Phyton l\xe4uft. Daf\xfcr musst du zuerst einmal [Python](https://www.python.org/shell/) installieren. Mein Spiel spielst du vorz\xfcglicherweise in VSC, da mein Spiel die Erweiterung [\\"Colorama\\"](https://pypi.org/project/colorama/) ben\xf6tigt, damit in der Konsole die Farben von meinem Spiel angezigt werden k\xf6nnen und es nicht aufgrund von fehlenden Voraussetzungen abst\xfcrzt. \\n\\n\\n## Neuer Top Down Entwurf:\\n**Top Down Entwurf vor dem programmieren:**\\n![Image](images/Top_Down_Entwurf.jpg)\\n**Top Down Entwurf nach dem programmieren:**\\n![Image](images/Top_Down_simple.png)\\n**Hier eine Beschiebene Version:**\\n![Image](images/Top_down_detail.png)\\n\\n# Algorythmisches Konzept: \\n## Felder Auff\xfcllen\\n\\n\\nDieser Teil des Spieles ist eigentlich Ziemlich simpel. wir m\xfcssen eine Funktion programmieren, welche bei leeren Feldern die Zahl aus dem Feld dar\xfcber nimmt. \\n\\nSp\xe4ter m\xfcssen wir der Funktion noch die M\xf6glichkeit geben bei den Obersten Feldern eine zuf\xe4llige Zahl zu importieren. \\n\\nDa mir dieses Problem zu gross war, habe ich zuerst in einem Seperaten Dokument gearbeitet. \\n\\n* Vorgehensweise:\\n* 1. Simple Liste erstellen \\n* 2. F\xfcr jeden einzelnen Wert in den Zeilen wiederholen \\n* 3. Falls oberste Zeile, zufallszahl einf\xfcgen \\n* 4. mithilfe des Indexes werte von Feldern \xfcberschreiben\\n* 5. F\xfcr jede Zeile wiederholen \\n\\nIch habe noch keine bessere Option daf\xfcr gefunden als das Programm f\xfcr jede Zele zu wiederholen, da ich keine gute m\xf6glichkeit hatte zu \xfcberpr\xfcfen ob es keine Leeren felder auf dem Spielfeld gibt. \\n\\n````py\\nfield = [[1,2, \' \'], [\' \',\' \', \' \'],[ \' \', \' \' , \' \']]  # 1.\\nsave = []\\n\\nimport random\\nrandom.seed(2)\\nnumbers = [1, 2, 4, 8]\\n\\ndef fieldrearrange():\\n    for i in range(5):     # 5. \\n        for x in field:\\n\\n            print(field.index(x))\\n            for y in x :                # 2. \\n                \\n                print(x.index(y))\\n                if y == \' \' :\\n\\n                    if field.index(x) <= 0:                            # 3. \\n                        field[0][x.index(y)] = random.choice(numbers)\\n            \\n                    if field.index(x) > 0:      # 4. \\n                        save = field[field.index(x) - 1][x.index(y)]\\n                        field[field.index(x) - 1][x.index(y)] = \' \'\\n                        field[field.index(x)][x.index(y)] = save\\n                        save = []\\n\\nfieldrearrange()   \\nprint(field)\\n````\\n\\n\\n\\n\\n\\n\\n\\n# Schwierigkeiten des Projektes:\\n\\nDa dies mein erstes gr\xf6sseres Programmier-projekt war, hatte ich so einige Schwierigkeiten, welche sich aus verschiedensten Faktoren zusammensetzen. Das nicht vertraut sein mit Python oder VSC, oder das simple \xfcberfodert sein aufgrund fehlender kreativit\xe4t zur umsetzung. Meiner meinung nach war meine gr\xf6sste Schwierigkeit/Problematik dieses Projektes mein Zeitmanagement. Ich habe gelernt, dass wenn man selbst gut im Zeitpaln liegt schnell zur\xfcckfallen kann wenn man nach dem Konzept von **try and error** arbeitet. Es kann schnell passieren, dass man nicht das sich gesetzte Ziel erreicht und sich eine L\xf6sung findet. Ich habe mich bei diesem Projekt mehrmals erwischt wie ich etwas f\xfcr 30-45min ausprobiert habe und es schlussendlich wieder komplett verworfen habe, da ich eine andere herangehensweise f\xfcr besser hielt. Das ganze ist im grunde auch nicht so Problematisch, wenn da ich relativ viel spass bei der Arbeit hatte. Jedoch kann das ganze problematisch werden, wenn man sich daurch in der Zeit verkalkuliert oder verliert.                                                                                                    \\n## Meine Tipps an dich:\\n\\n* **Tipps im Allgeminen**\\n    * Tausche dich mit anderen aus\\n    * frage bei deinen Lehrern/Mitsch\xfclern nach\\n    * Falls du noch nicht so erfahren bist und es nicht auf Anhieb funktioniert, lass dich dadurch nicht Frustrieren und Arbeite an einem anderen Tag weiter\\n * **Tipps spezifisch f\xfcr dieses Projekt:**\\n    * Lies dir die Theorie f\xfcr 2-Dimensionale Listen in Python nochmals durch \\n    * Versuche dich an die empfohlene/vorgegebe Struckturierung zu halten"},{"id":"/NumTrip game Blog/Top down entwurf Numtrip","metadata":{"permalink":"/EF_Informatik/NumTrip game Blog/Top down entwurf Numtrip","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/NumTrip game Blog/Top down entwurf Numtrip.md","source":"@site/blog/NumTrip game Blog/Top down entwurf Numtrip.md","title":"Top down entwurf NumTrip","description":"Das Game besteht im grossen und ganzen aus einem Spielfeld, in welchen die Zahlenwerte generiert, dargestellt und ver\xe4ndert werden.","date":"2024-01-25T20:49:42.000Z","formattedDate":"25. Januar 2024","tags":[],"readingTime":0.38,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Finaler Blogeintrag","permalink":"/EF_Informatik/NumTrip game Blog/Finaler Blogeintag"},"nextItem":{"title":"Finaler Blogeintrag","permalink":"/EF_Informatik/2023/01/16/numtrip-final"}},"content":"**Das Game besteht im grossen und ganzen aus einem Spielfeld, in welchen die Zahlenwerte generiert, dargestellt und ver\xe4ndert werden.** \\n\\n* Wir haben ein Spielfeld und die jeweilige Eingabe zu einem bestimmten Feld.  \\n*(Die Eingabe wurde zu diesem Zeitpunkt schon auf Fehler \xfcberpr\xfcft.)*\\n* Dabei m\xfcssen wir den Wert des Feldes Abrufen k\xf6nnen. \\n* Sp\xe4ter muss \xfcberpr\xfcft werde ob ein Nachbarfeld den selben wert hat.  \\n*(bestenfalls rekursiv da dann die n\xe4chsten Felder auch \xfcberpr\xfcft werden...)*\\n\\n![image](images/Top_Down_Entwurf.jpg)\\n\\n---"},{"id":"/2023/01/16/numtrip-final","metadata":{"permalink":"/EF_Informatik/2023/01/16/numtrip-final","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/2023-01-16-numtrip-final/index.md","source":"@site/blog/2023-01-16-numtrip-final/index.md","title":"Finaler Blogeintrag","description":"Ziel des Spiels/Projekts","date":"2023-01-16T00:00:00.000Z","formattedDate":"16. Januar 2023","tags":[],"readingTime":3.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Top down entwurf NumTrip","permalink":"/EF_Informatik/NumTrip game Blog/Top down entwurf Numtrip"}},"content":"## Ziel des Spiels/Projekts\\nNumTrip ist ein simples python-Konsolen Spiel. Wir haben ein Spielfeld welches aus 5x5 Feldern mit veschiedenen Zahlen(Werten) besteht. Felder, welche ein angernzendes Feld mit derselben Zahl haben kann man ausw\xe4hlen und der Wert im ausgew\xe4hlten Feld verdoppelt sich. Die angrenzenden Felder werden geelert und mit zuf\xe4lligen neuen gef\xfcllt. Man gewinnt das Spiel indem man einen bestimmten wert Erreicht ohne das einem die M\xf6glichkeiten weitere Z\xfcge zu machen ausgehen. Falls du fragen hast, probiel das Spiel doch einfach aus. \\n\\n## Was wird zum spielen des Spieles ben\xf6tigt:\\nDamit du das Spiel auch spielen kannst, ben\xf6tigst du eine Phyton Konsole, auf welcher Phyton l\xe4uft. Daf\xfcr musst du zuerst einmal [Python](https://www.python.org/shell/) installieren. Mein Spiel spielst du vorz\xfcglicherweise in VSC, da mein Spiel die Erweiterung [\\"Colorama\\"](https://pypi.org/project/colorama/) ben\xf6tigt, damit in der Konsole die Farben von meinem Spiel angezigt werden k\xf6nnen und es nicht aufgrund von fehlenden Voraussetzungen abst\xfcrzt. \\n\\n\\n## Neuer Top Down Entwurf:\\n### Top Down Entwurf vor dem programmieren:\\n![Image](images/Top_Down_Entwurf.jpg)\\n### Top Down Entwurf nach dem programmieren:\\n![Image](images/Top_Down_simple.png)\\n### Hier eine Beschiebene Version:\\n![Image](images/Top_down_detail.png)\\n\\n# Algorythmisches Konzept: \\n## Felder Auff\xfcllen\\n\\n\\nDieser Teil des Spieles ist eigentlich Ziemlich simpel. wir m\xfcssen eine Funktion programmieren, welche bei leeren Feldern die Zahl aus dem Feld dar\xfcber nimmt. \\n\\nSp\xe4ter m\xfcssen wir der Funktion noch die M\xf6glichkeit geben bei den Obersten Feldern eine zuf\xe4llige Zahl zu importieren. \\n\\nDa mir dieses Problem zu gross war, habe ich zuerst in einem Seperaten Dokument gearbeitet. \\n\\n* Vorgehensweise:\\n* 1. Simple Liste erstellen \\n* 2. F\xfcr jeden einzelnen Wert in den Zeilen wiederholen \\n* 3. Falls oberste Zeile, zufallszahl einf\xfcgen \\n* 4. mithilfe des Indexes werte von Feldern \xfcberschreiben\\n* 5. F\xfcr jede Zeile wiederholen \\n\\nIch habe noch keine bessere Option daf\xfcr gefunden als das Programm f\xfcr jede Zele zu wiederholen, da ich keine gute m\xf6glichkeit hatte zu \xfcberpr\xfcfen ob es keine Leeren felder auf dem Spielfeld gibt. \\n\\n````py\\nfield = [[1,2, \' \'], [\' \',\' \', \' \'],[ \' \', \' \' , \' \']]  # 1.\\nsave = []\\n\\nimport random\\nrandom.seed(2)\\nnumbers = [1, 2, 4, 8]\\n\\ndef fieldrearrange():\\n    for i in range(5):     # 5. \\n        for x in field:\\n\\n            print(field.index(x))\\n            for y in x :                # 2. \\n                \\n                print(x.index(y))\\n                if y == \' \' :\\n\\n                    if field.index(x) <= 0:                            # 3. \\n                        field[0][x.index(y)] = random.choice(numbers)\\n            \\n                    if field.index(x) > 0:      # 4. \\n                        save = field[field.index(x) - 1][x.index(y)]\\n                        field[field.index(x) - 1][x.index(y)] = \' \'\\n                        field[field.index(x)][x.index(y)] = save\\n                        save = []\\n\\nfieldrearrange()   \\nprint(field)\\n````\\n\\n\\n\\n\\n\\n\\n\\n# Schwierigkeiten des Projektes:\\n\\nDa dies mein erstes gr\xf6sseres Programmier-projekt war, hatte ich so einige Schwierigkeiten, welche sich aus verschiedensten Faktoren zusammensetzen. Das nicht vertraut sein mit Python oder VSC, oder das simple \xfcberfodert sein aufgrund fehlender kreativit\xe4t zur umsetzung. Meiner meinung nach war meine gr\xf6sste Schwierigkeit/Problematik dieses Projektes mein Zeitmanagement. Ich habe gelernt, dass wenn man selbst gut im Zeitpaln liegt schnell zur\xfcckfallen kann wenn man nach dem Konzept von **try and error** arbeitet. Es kann schnell passieren, dass man nicht das sich gesetzte Ziel erreicht und sich eine L\xf6sung findet. Ich habe mich bei diesem Projekt mehrmals erwischt wie ich etwas f\xfcr 30-45min ausprobiert habe und es schlussendlich wieder komplett verworfen habe, da ich eine andere herangehensweise f\xfcr besser hielt. Das ganze ist im grunde auch nicht so Problematisch, wenn da ich relativ viel spass bei der Arbeit hatte. Jedoch kann das ganze problematisch werden, wenn man sich daurch in der Zeit verkalkuliert oder verliert.                                                                                                    \\n## Meine Tipps an dich:\\n\\n* **Tipps im Allgeminen**\\n    * Tausche dich mit anderen aus\\n    * frage bei deinen Lehrern/Mitsch\xfclern nach\\n    * Falls du noch nicht so erfahren bist und es nicht auf Anhieb funktioniert, lass dich dadurch nicht Frustrieren und Arbeite an einem anderen Tag weiter\\n * **Tipps spezifisch f\xfcr dieses Projekt:**\\n    * Lies dir die Theorie f\xfcr 2-Dimensionale Listen in Python nochmals durch \\n    * Versuche dich an die empfohlene/vorgegebe Struckturierung zu halten"}]}')}}]);