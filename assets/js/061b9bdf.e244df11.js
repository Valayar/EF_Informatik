"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[846],{7384:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/Arbeit an NumTrip","metadata":{"permalink":"/EF_Informatik/Arbeit an NumTrip","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/Arbeit an NumTrip.md","source":"@site/blog/Arbeit an NumTrip.md","title":"Arbeit an NumTrip","description":"Floodfill","date":"2023-01-09T18:29:09.000Z","formattedDate":"9. Januar 2023","tags":[],"readingTime":2.83,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Datenstruktur NumTrip","permalink":"/EF_Informatik/Datenstruktur Numtrip"}},"content":"# Nachbarzellen Kombinieren\\n\\n **Floodfill**\\n\\nDas Prinzip einer Floodfill funktion ist ja noch relativ einfach zu verstehen. Wie diese in der Programmierspache implementiert wird, ist eine andere Sache. zun\xe4chst hatte ich mir den zugeh\xf6renden Wikipediaeintrag dazu angeschaut. \\n\\njedoch konnte ich mir den unterschied von diesen zwei Codebl\xf6cken nicht erkl\xe4ren.\\n\\n\\n```py\\ndef fill4(x, y, alteFarbe, neueFarbe):\\n    if getPixel(x, y) == alteFarbe:\\n        setPixel(x, y, neueFarbe)\\n        fill4(x, y + 1, alteFarbe, neueFarbe)  # unten\\n        fill4(x, y - 1, alteFarbe, neueFarbe)  # oben\\n        fill4(x + 1, y, alteFarbe, neueFarbe)  # rechts\\n        fill4(x - 1, y, alteFarbe, neueFarbe)  # links\\n```\\n\\n```py\\ndef fill4(x, y, alteFarbe, neueFarbe):\\n    stack.push(x, y)\\n    while stack.isNotEmpty():\\n        (x, y) = stack.pop()\\n        if getPixel(x, y) == alteFarbe:\\n            setPixel(x, y, neueFarbe)\\n            stack.push(x, y + 1)\\n            stack.push(x, y - 1)\\n            stack.push(x + 1, y)\\n            stack.push(x - 1, y)\\n```\\n\\nDer obere ist ganz allgemein, der andere ist prim\xe4r f\xfcr Phyton. \\n\\nIch habe mir noch ein noch ein Praxisbeispiel zum Floodfill-Algorythmus angeschaut. \\nDurch dieses habe ich die Anwendung besser verstehen k\xf6nnen. \\n\\n```py\\ndef flood_fill(x ,y, old, new):\\n    # we need the x and y of the start position, the old value,\\n    # and the new value\\n    # the flood fill has 4 parts\\n    # firstly, make sure the x and y are inbounds\\n    if x < 0 or x >= len(field[0]) or y < 0 or y >= len(field):\\n        return\\n    # secondly, check if the current position equals the old value\\n    if field[y][x] != old:\\n        return\\n    \\n    # thirdly, set the current position to the new value\\n    field[y][x] = new\\n    # fourthly, attempt to fill the neighboring positions\\n    flood_fill(x+1, y, old, new)\\n    flood_fill(x-1, y, old, new)\\n    flood_fill(x, y+1, old, new)\\n    flood_fill(x, y-1, old, new)\\n```\\nDieses Beispiel l\xf6st das Problem des oberen Algorythmus welcher nicht erkennt kann ob man sich innerhalb des Feldes befindet. Weil sobald ein Feld ausserhalb der Liste ver\xe4ndert werden soll, bekommen wir die Fehlermeldung: **IndexError: list index out of range** \\n\\nIch habe diesen Beispielscode modifiziert und in meinem NumTrip Game implementiert. \\n\\nQuellenangaben:  \\n[Wikipediaeintrag Floodfill](https://de.wikipedia.org/wiki/Floodfill)  \\n[A Python Example of the Flood Fill Algorithm\\n](https://python.plainenglish.io/a-python-example-of-the-flood-fill-algorithm-bced7f96f569)\\n\\n# Felder Auff\xfcllen\\n\\n\\nDieser Teil des Spieles ist eigentlich Ziemlich simpel. wir m\xfcssen eine Funktion programmieren, welche bei leeren Feldern die Zahl aus dem Feld dar\xfcber nimmt. \\n\\nSp\xe4ter m\xfcssen wir der Funktion noch die M\xf6glichkeit geben bei den Obersten Feldern eine zuf\xe4llige Zahl zu importieren. \\n\\nDa mir dieses Problem zu gross war, habe ich zuerst in einem Seperaten Dokument gearbeitet. \\n\\n* Vorgehensweise:\\n* 1. Simple Liste erstellen \\n* 2. F\xfcr jeden einzelnen Wert in den Zeilen wiederholen \\n* 3. Falls oberste Zeile, zufallszahl einf\xfcgen \\n* 4. mithilfe des Indexes werte von Feldern \xfcberschreiben\\n* 5. F\xfcr jede Zeile wiederholen \\n\\nIch habe noch keine bessere Option daf\xfcr gefunden als das Programm f\xfcr jede Zele zu wiederholen, da ich keine gute m\xf6glichkeit hatte zu \xfcberpr\xfcfen ob es keine Leeren felder auf dem Spielfeld gibt. \\n\\n````py\\nfield = [[1,2, \' \'], [\' \',\' \', \' \'],[ \' \', \' \' , \' \']]  # 1.\\nsave = []\\n\\nimport random\\nrandom.seed(2)\\nnumbers = [1, 2, 4, 8]\\n\\ndef fieldrearrange():\\n    for i in range(5):     # 5. \\n        for x in field:\\n\\n            print(field.index(x))\\n            for y in x :                # 2. \\n                \\n                print(x.index(y))\\n                if y == \' \' :\\n\\n                    if field.index(x) <= 0:                            # 3. \\n                        field[0][x.index(y)] = random.choice(numbers)\\n            \\n                    if field.index(x) > 0:      # 4. \\n                        save = field[field.index(x) - 1][x.index(y)]\\n                        field[field.index(x) - 1][x.index(y)] = \' \'\\n                        field[field.index(x)][x.index(y)] = save\\n                        save = []\\n\\nfieldrearrange()   \\nprint(field)\\n````"},{"id":"/Datenstruktur Numtrip","metadata":{"permalink":"/EF_Informatik/Datenstruktur Numtrip","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/Datenstruktur Numtrip.md","source":"@site/blog/Datenstruktur Numtrip.md","title":"Datenstruktur NumTrip","description":"Das Spielfeld besteht aus einer Liste, in welcher Weitere Listen die","date":"2023-01-09T18:29:09.000Z","formattedDate":"9. Januar 2023","tags":[],"readingTime":0.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Arbeit an NumTrip","permalink":"/EF_Informatik/Arbeit an NumTrip"},"nextItem":{"title":"Top down entwurf NumTrip","permalink":"/EF_Informatik/Top down entwurf Numtrip"}},"content":"**Das Spielfeld besteht aus einer Liste, in welcher Weitere Listen die\\njeweiligen Zeilen und Spalten definieren.\\nwir H\xe4tten insgesamt eine 3 Dimensionale Listen bei der in der letzten Liste eine \\nZahl den Wert des Blockes (Feldes) definiert.**\\n\\nJe nach Wert des jeweiligen Feldes k\xf6nnen wir Farbe duch eine vordefinierung\\n(andere Funktion) definieren.\\n\\n![image](images/Datenstrucktur.jpg)\\n\\n---"},{"id":"/Top down entwurf Numtrip","metadata":{"permalink":"/EF_Informatik/Top down entwurf Numtrip","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/Top down entwurf Numtrip.md","source":"@site/blog/Top down entwurf Numtrip.md","title":"Top down entwurf NumTrip","description":"Das Game besteht im grossen und ganzen aus einem Spielfeld, in welchen die Zahlenwerte generiert, dargestellt und ver\xe4ndert werden.","date":"2023-01-09T18:29:09.000Z","formattedDate":"9. Januar 2023","tags":[],"readingTime":0.38,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Datenstruktur NumTrip","permalink":"/EF_Informatik/Datenstruktur Numtrip"},"nextItem":{"title":"Wiedereinstieg in Python","permalink":"/EF_Informatik/Wiedereinstieg in Python"}},"content":"**Das Game besteht im grossen und ganzen aus einem Spielfeld, in welchen die Zahlenwerte generiert, dargestellt und ver\xe4ndert werden.** \\n\\n* Wir haben ein Spielfeld und die jeweilige Eingabe zu einem bestimmten Feld.  \\n*(Die Eingabe wurde zu diesem Zeitpunkt schon auf Fehler \xfcberpr\xfcft.)*\\n* Dabei m\xfcssen wir den Wert des Feldes Abrufen k\xf6nnen. \\n* Sp\xe4ter muss \xfcberpr\xfcft werde ob ein Nachbarfeld den selben wert hat.  \\n*(bestenfalls rekursiv da dann die n\xe4chsten Felder auch \xfcberpr\xfcft werden...)*\\n\\n![image](images/Top_Down_Entwurf.jpg)\\n\\n---"},{"id":"/Wiedereinstieg in Python","metadata":{"permalink":"/EF_Informatik/Wiedereinstieg in Python","editUrl":"https://github.com/Valayar/EF_Informatik/tree/main/blog/Wiedereinstieg in Python.md","source":"@site/blog/Wiedereinstieg in Python.md","title":"Wiedereinstieg in Python","description":"* Sehr Wichtig!","date":"2023-01-09T18:29:09.000Z","formattedDate":"9. Januar 2023","tags":[],"readingTime":0.14,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Top down entwurf NumTrip","permalink":"/EF_Informatik/Top down entwurf Numtrip"}},"content":"* Sehr Wichtig!\\n\\n![image](images/meme.png)\\n * Repeat = for i in range(n)\\n\\n```py\\nforward(n) fd(n)\u200b\\n\\nbackward(n) back(n) bk(n)\u200b\\n\\nleft(angle) lt(angle)\u200b\\n\\nright(angle) rt(angle)\u200b\\n\\ngoto(x, y)\u200b\\n\\nhome()\u200b\\n\\nsetheading(to_angle) seth(to_angle)\u200b\\n```\\n\\n---"}]}')}}]);