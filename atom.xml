<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Valayar.github.io/EF_Informatik/</id>
    <title>Lern Blog Blog</title>
    <updated>2024-02-01T14:54:02.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Valayar.github.io/EF_Informatik/"/>
    <subtitle>Lern Blog Blog</subtitle>
    <icon>https://Valayar.github.io/EF_Informatik/img/Logo_Website_Transparent_White_400x400.ico</icon>
    <entry>
        <title type="html"><![CDATA[Erfahrungen zum Erstellen einer API mit Node-RED]]></title>
        <id>/Erstellen einer API mit Node-RED</id>
        <link href="https://Valayar.github.io/EF_Informatik/Erstellen einer API mit Node-RED"/>
        <updated>2024-02-01T14:54:02.000Z</updated>
        <summary type="html"><![CDATA[Postman]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="postman">Postman<a class="hash-link" href="#postman" title="Direkter Link zur Überschrift">​</a></h2><p>Postman ist ein Programm, welches dafür genutzt wird um HTTP Anfragen zu überprüfen. Diese Technik wird benötigt, falls man daran ist eine Webseite zu Programmieren und wissen muss was der Webserver als Antwort zurückgibt. So kann man testen ob alles Ordnungsgemäss funktioniert. Diese Technik wird auch benötigt falls man eine API programmiert/entwickelt. (Stichwort Bugfixing) Ich bin mir hierbei zwar nicht ganz sicher, aber ich glaube, dass man diese Technik benötigt, falls eine Webseite down ist und den genauen/ungefähren Fehler zu ermitteln. </p><p>In unserem Beispiel haben wir mit Postman genutzt um auf unsere mit Node-RED erstellte API zuzugreifen.</p><p><strong>Warum Benötigt man Postman eigentlich?</strong>
Man kann genauso die gewünschte Webadresse auch in einen Browser eingeben, und erhält dasselbe Resultat. </p><p><em>Der Grund dafür ist dieser: Wenn man es offline oder lokal ausprobieren möchte muss man Postman verwenden. Node-RED ist nach mir eine Ausnahme</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="node-red">Node-RED<a class="hash-link" href="#node-red" title="Direkter Link zur Überschrift">​</a></h2><p>Auf Node-RED besteht die von uns erstellte API aus verschiedenen "Workflows". In diesen Flows haben wir verschiedene Bausteine mit verschiedenen Funktionen aneinandergehängt. Durch das aneinanderhängen dieser Funktionen wird die API programmiert. Allgemein wichtig ist der HTTP input sowie der HTTP output. So können wir mit unserer "simulierten Webseite" kommunizieren. In der Konsole von Node-RED sollten wir auch Auslesen können falls jemand unsere Webseite aufgerufen hat. Im Allgemeinen sollten wir auch nichts ausser dem Statuscode 200 von dieser "Webseite" erhalten. Dadurch wissen wir auch, dass alles funktioniert. Falls die Webseite nun auch eine Funktion haben soll kann man diese zwischen dem In und Output einfügen. Diese Funktion können wir nun mit Java script Code füttern um unserer API eine Funktion zu geben.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wiedereinstieg in Python]]></title>
        <id>/Wiedereinstieg in Python</id>
        <link href="https://Valayar.github.io/EF_Informatik/Wiedereinstieg in Python"/>
        <updated>2024-02-01T14:54:02.000Z</updated>
        <summary type="html"><![CDATA[* Sehr Wichtig!]]></summary>
        <content type="html"><![CDATA[<ul><li>Sehr Wichtig!</li></ul><p><img loading="lazy" alt="image" src="/EF_Informatik/assets/images/meme-f699ac34a8ff5943c0870bd68d7a7435.png" width="320" height="225" class="img_ev3q"></p><ul><li>Repeat = for i in range(n)</li></ul><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">forward</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> fd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">backward</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> bk</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">angle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> lt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">angle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">angle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> rt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">angle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">goto</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">home</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">setheading</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">to_angle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> seth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">to_angle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">​</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arbeit an NumTrip]]></title>
        <id>/NumTrip game Blog/Arbeit an NumTrip</id>
        <link href="https://Valayar.github.io/EF_Informatik/NumTrip game Blog/Arbeit an NumTrip"/>
        <updated>2024-02-01T14:54:02.000Z</updated>
        <summary type="html"><![CDATA[Floodfill]]></summary>
        <content type="html"><![CDATA[<h1>Nachbarzellen Kombinieren</h1><p> <strong>Floodfill</strong></p><p>Das Prinzip einer Floodfill funktion ist ja noch relativ einfach zu verstehen. Wie diese in der Programmierspache implementiert wird, ist eine andere Sache. zunächst hatte ich mir den zugehörenden Wikipediaeintrag dazu angeschaut. </p><p>jedoch konnte ich mir den unterschied von diesen zwei Codeblöcken nicht erklären.</p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fill4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> getPixel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        setPixel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        fill4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># unten</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        fill4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># oben</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        fill4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># rechts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        fill4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># links</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fill4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">isNotEmpty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> getPixel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> alteFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            setPixel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> neueFarbe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            stack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Der obere ist ganz allgemein, der andere ist primär für Phyton. </p><p>Ich habe mir noch ein noch ein Praxisbeispiel zum Floodfill-Algorythmus angeschaut.
Durch dieses habe ich die Anwendung besser verstehen können. </p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">flood_fill</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x </span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> old</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># we need the x and y of the start position, the old value,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># and the new value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># the flood fill has 4 parts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># firstly, make sure the x and y are inbounds</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> x </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">or</span><span class="token plain"> x </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">or</span><span class="token plain"> y </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">or</span><span class="token plain"> y </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># secondly, check if the current position equals the old value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">!=</span><span class="token plain"> old</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># thirdly, set the current position to the new value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> new</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># fourthly, attempt to fill the neighboring positions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    flood_fill</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> old</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    flood_fill</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> old</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    flood_fill</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> old</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    flood_fill</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> old</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> new</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Dieses Beispiel löst das Problem des oberen Algorythmus welcher nicht erkennt kann ob man sich innerhalb des Feldes befindet. Weil sobald ein Feld ausserhalb der Liste verändert werden soll, bekommen wir die Fehlermeldung: <strong>IndexError: list index out of range</strong> </p><p>Ich habe diesen Beispielscode modifiziert und in meinem NumTrip Game implementiert. </p><p>Quellenangaben:<br>
<a href="https://de.wikipedia.org/wiki/Floodfill" target="_blank" rel="noopener noreferrer">Wikipediaeintrag Floodfill</a><br>
<a href="https://python.plainenglish.io/a-python-example-of-the-flood-fill-algorithm-bced7f96f569" target="_blank" rel="noopener noreferrer">A Python Example of the Flood Fill Algorithm
</a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Datenstruktur NumTrip]]></title>
        <id>/NumTrip game Blog/Datenstruktur Numtrip</id>
        <link href="https://Valayar.github.io/EF_Informatik/NumTrip game Blog/Datenstruktur Numtrip"/>
        <updated>2024-02-01T14:54:02.000Z</updated>
        <summary type="html"><![CDATA[Das Spielfeld besteht aus einer Liste, in welcher Weitere Listen die]]></summary>
        <content type="html"><![CDATA[<p><strong>Das Spielfeld besteht aus einer Liste, in welcher Weitere Listen die
jeweiligen Zeilen und Spalten definieren.
wir Hätten insgesamt eine 3 Dimensionale Listen bei der in der letzten Liste eine
Zahl den Wert des Blockes (Feldes) definiert.</strong></p><p>Je nach Wert des jeweiligen Feldes können wir Farbe duch eine vordefinierung
(andere Funktion) definieren.</p><p><img loading="lazy" alt="image" src="/EF_Informatik/assets/images/Datenstrucktur-6e4100fe568e7f708c6e58d4a2222030.jpg" width="3024" height="4032" class="img_ev3q"></p><hr>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Finaler Blogeintrag]]></title>
        <id>/NumTrip game Blog/Finaler Blogeintag</id>
        <link href="https://Valayar.github.io/EF_Informatik/NumTrip game Blog/Finaler Blogeintag"/>
        <updated>2024-02-01T14:54:02.000Z</updated>
        <summary type="html"><![CDATA[Ziel des Spiels/Projekts]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ziel-des-spielsprojekts">Ziel des Spiels/Projekts<a class="hash-link" href="#ziel-des-spielsprojekts" title="Direkter Link zur Überschrift">​</a></h2><p>NumTrip ist ein simples python-Konsolen Spiel. Wir haben ein Spielfeld welches aus 5x5 Feldern mit veschiedenen Zahlen(Werten) besteht. Felder, welche ein angernzendes Feld mit derselben Zahl haben kann man auswählen und der Wert im ausgewählten Feld verdoppelt sich. Die angrenzenden Felder werden geelert und mit zufälligen neuen gefüllt. Man gewinnt das Spiel indem man einen bestimmten wert Erreicht ohne das einem die Möglichkeiten weitere Züge zu machen ausgehen. Falls du fragen hast, probiel das Spiel doch einfach aus. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="was-wird-zum-spielen-des-spieles-benötigt">Was wird zum spielen des Spieles benötigt:<a class="hash-link" href="#was-wird-zum-spielen-des-spieles-benötigt" title="Direkter Link zur Überschrift">​</a></h2><p>Damit du das Spiel auch spielen kannst, benötigst du eine Phyton Konsole, auf welcher Phyton läuft. Dafür musst du zuerst einmal <a href="https://www.python.org/shell/" target="_blank" rel="noopener noreferrer">Python</a> installieren. Mein Spiel spielst du vorzüglicherweise in VSC, da mein Spiel die Erweiterung <a href="https://pypi.org/project/colorama/" target="_blank" rel="noopener noreferrer">"Colorama"</a> benötigt, damit in der Konsole die Farben von meinem Spiel angezigt werden können und es nicht aufgrund von fehlenden Voraussetzungen abstürzt. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="neuer-top-down-entwurf">Neuer Top Down Entwurf:<a class="hash-link" href="#neuer-top-down-entwurf" title="Direkter Link zur Überschrift">​</a></h2><p><strong>Top Down Entwurf vor dem programmieren:</strong>
<img loading="lazy" alt="Image" src="/EF_Informatik/assets/images/Top_Down_Entwurf-ecb534ec81be27c8c46e96ae8fe153db.jpg" width="3024" height="4032" class="img_ev3q">
<strong>Top Down Entwurf nach dem programmieren:</strong>
<img loading="lazy" alt="Image" src="/EF_Informatik/assets/images/Top_Down_simple-9b9f9db1b995aa5ed67457d6a7f35b7f.png" width="1010" height="500" class="img_ev3q">
<strong>Hier eine Beschiebene Version:</strong>
<img loading="lazy" alt="Image" src="/EF_Informatik/assets/images/Top_down_detail-8a934eb7460c3b55f2ad13dc66951f46.png" width="2244" height="582" class="img_ev3q"></p><h1>Algorythmisches Konzept:</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="felder-auffüllen">Felder Auffüllen<a class="hash-link" href="#felder-auffüllen" title="Direkter Link zur Überschrift">​</a></h2><p>Dieser Teil des Spieles ist eigentlich Ziemlich simpel. wir müssen eine Funktion programmieren, welche bei leeren Feldern die Zahl aus dem Feld darüber nimmt. </p><p>Später müssen wir der Funktion noch die Möglichkeit geben bei den Obersten Feldern eine zufällige Zahl zu importieren. </p><p>Da mir dieses Problem zu gross war, habe ich zuerst in einem Seperaten Dokument gearbeitet. </p><ul><li>Vorgehensweise:</li><li><ol><li>Simple Liste erstellen </li></ol></li><li><ol start="2"><li>Für jeden einzelnen Wert in den Zeilen wiederholen </li></ol></li><li><ol start="3"><li>Falls oberste Zeile, zufallszahl einfügen </li></ol></li><li><ol start="4"><li>mithilfe des Indexes werte von Feldern überschreiben</li></ol></li><li><ol start="5"><li>Für jede Zeile wiederholen </li></ol></li></ul><p>Ich habe noch keine bessere Option dafür gefunden als das Programm für jede Zele zu wiederholen, da ich keine gute möglichkeit hatte zu überprüfen ob es keine Leeren felder auf dem Spielfeld gibt. </p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">field </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># 1.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">save </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> random</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">numbers </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fieldrearrange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">     </span><span class="token comment" style="color:rgb(98, 114, 164)"># 5. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> x </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> y </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> x </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)"># 2. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> y </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&lt;=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">                            </span><span class="token comment" style="color:rgb(98, 114, 164)"># 3. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">choice</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">numbers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)"># 4. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        save </span><span class="token operator">=</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> save</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        save </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fieldrearrange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>Schwierigkeiten des Projektes:</h1><p>Da dies mein erstes grösseres Programmier-projekt war, hatte ich so einige Schwierigkeiten, welche sich aus verschiedensten Faktoren zusammensetzen. Das nicht vertraut sein mit Python oder VSC, oder das simple überfodert sein aufgrund fehlender kreativität zur umsetzung. Meiner meinung nach war meine grösste Schwierigkeit/Problematik dieses Projektes mein Zeitmanagement. Ich habe gelernt, dass wenn man selbst gut im Zeitpaln liegt schnell zurückfallen kann wenn man nach dem Konzept von <strong>try and error</strong> arbeitet. Es kann schnell passieren, dass man nicht das sich gesetzte Ziel erreicht und sich eine Lösung findet. Ich habe mich bei diesem Projekt mehrmals erwischt wie ich etwas für 30-45min ausprobiert habe und es schlussendlich wieder komplett verworfen habe, da ich eine andere herangehensweise für besser hielt. Das ganze ist im grunde auch nicht so Problematisch, wenn da ich relativ viel spass bei der Arbeit hatte. Jedoch kann das ganze problematisch werden, wenn man sich daurch in der Zeit verkalkuliert oder verliert.                                                                                                    </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meine-tipps-an-dich">Meine Tipps an dich:<a class="hash-link" href="#meine-tipps-an-dich" title="Direkter Link zur Überschrift">​</a></h2><ul><li><strong>Tipps im Allgeminen</strong><ul><li>Tausche dich mit anderen aus</li><li>frage bei deinen Lehrern/Mitschülern nach</li><li>Falls du noch nicht so erfahren bist und es nicht auf Anhieb funktioniert, lass dich dadurch nicht Frustrieren und Arbeite an einem anderen Tag weiter</li></ul></li><li><strong>Tipps spezifisch für dieses Projekt:</strong><ul><li>Lies dir die Theorie für 2-Dimensionale Listen in Python nochmals durch </li><li>Versuche dich an die empfohlene/vorgegebe Struckturierung zu halten</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top down entwurf NumTrip]]></title>
        <id>/NumTrip game Blog/Top down entwurf Numtrip</id>
        <link href="https://Valayar.github.io/EF_Informatik/NumTrip game Blog/Top down entwurf Numtrip"/>
        <updated>2024-02-01T14:54:02.000Z</updated>
        <summary type="html"><![CDATA[Das Game besteht im grossen und ganzen aus einem Spielfeld, in welchen die Zahlenwerte generiert, dargestellt und verändert werden.]]></summary>
        <content type="html"><![CDATA[<p><strong>Das Game besteht im grossen und ganzen aus einem Spielfeld, in welchen die Zahlenwerte generiert, dargestellt und verändert werden.</strong> </p><ul><li>Wir haben ein Spielfeld und die jeweilige Eingabe zu einem bestimmten Feld.<br><em>(Die Eingabe wurde zu diesem Zeitpunkt schon auf Fehler überprüft.)</em></li><li>Dabei müssen wir den Wert des Feldes Abrufen können. </li><li>Später muss überprüft werde ob ein Nachbarfeld den selben wert hat.<br><em>(bestenfalls rekursiv da dann die nächsten Felder auch überprüft werden...)</em></li></ul><p><img loading="lazy" alt="image" src="/EF_Informatik/assets/images/Top_Down_Entwurf-ecb534ec81be27c8c46e96ae8fe153db.jpg" width="3024" height="4032" class="img_ev3q"></p><hr>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Finaler Blogeintrag]]></title>
        <id>/2023/01/16/numtrip-final</id>
        <link href="https://Valayar.github.io/EF_Informatik/2023/01/16/numtrip-final"/>
        <updated>2023-01-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Ziel des Spiels/Projekts]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ziel-des-spielsprojekts">Ziel des Spiels/Projekts<a class="hash-link" href="#ziel-des-spielsprojekts" title="Direkter Link zur Überschrift">​</a></h2><p>NumTrip ist ein simples python-Konsolen Spiel. Wir haben ein Spielfeld welches aus 5x5 Feldern mit veschiedenen Zahlen(Werten) besteht. Felder, welche ein angernzendes Feld mit derselben Zahl haben kann man auswählen und der Wert im ausgewählten Feld verdoppelt sich. Die angrenzenden Felder werden geelert und mit zufälligen neuen gefüllt. Man gewinnt das Spiel indem man einen bestimmten wert Erreicht ohne das einem die Möglichkeiten weitere Züge zu machen ausgehen. Falls du fragen hast, probiel das Spiel doch einfach aus. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="was-wird-zum-spielen-des-spieles-benötigt">Was wird zum spielen des Spieles benötigt:<a class="hash-link" href="#was-wird-zum-spielen-des-spieles-benötigt" title="Direkter Link zur Überschrift">​</a></h2><p>Damit du das Spiel auch spielen kannst, benötigst du eine Phyton Konsole, auf welcher Phyton läuft. Dafür musst du zuerst einmal <a href="https://www.python.org/shell/" target="_blank" rel="noopener noreferrer">Python</a> installieren. Mein Spiel spielst du vorzüglicherweise in VSC, da mein Spiel die Erweiterung <a href="https://pypi.org/project/colorama/" target="_blank" rel="noopener noreferrer">"Colorama"</a> benötigt, damit in der Konsole die Farben von meinem Spiel angezigt werden können und es nicht aufgrund von fehlenden Voraussetzungen abstürzt. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="neuer-top-down-entwurf">Neuer Top Down Entwurf:<a class="hash-link" href="#neuer-top-down-entwurf" title="Direkter Link zur Überschrift">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="top-down-entwurf-vor-dem-programmieren">Top Down Entwurf vor dem programmieren:<a class="hash-link" href="#top-down-entwurf-vor-dem-programmieren" title="Direkter Link zur Überschrift">​</a></h3><p><img loading="lazy" alt="Image" src="/EF_Informatik/assets/images/Top_Down_Entwurf-ecb534ec81be27c8c46e96ae8fe153db.jpg" width="3024" height="4032" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="top-down-entwurf-nach-dem-programmieren">Top Down Entwurf nach dem programmieren:<a class="hash-link" href="#top-down-entwurf-nach-dem-programmieren" title="Direkter Link zur Überschrift">​</a></h3><p><img loading="lazy" alt="Image" src="/EF_Informatik/assets/images/Top_Down_simple-9b9f9db1b995aa5ed67457d6a7f35b7f.png" width="1010" height="500" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hier-eine-beschiebene-version">Hier eine Beschiebene Version:<a class="hash-link" href="#hier-eine-beschiebene-version" title="Direkter Link zur Überschrift">​</a></h3><p><img loading="lazy" alt="Image" src="/EF_Informatik/assets/images/Top_down_detail-8a934eb7460c3b55f2ad13dc66951f46.png" width="2244" height="582" class="img_ev3q"></p><h1>Algorythmisches Konzept:</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="felder-auffüllen">Felder Auffüllen<a class="hash-link" href="#felder-auffüllen" title="Direkter Link zur Überschrift">​</a></h2><p>Dieser Teil des Spieles ist eigentlich Ziemlich simpel. wir müssen eine Funktion programmieren, welche bei leeren Feldern die Zahl aus dem Feld darüber nimmt. </p><p>Später müssen wir der Funktion noch die Möglichkeit geben bei den Obersten Feldern eine zufällige Zahl zu importieren. </p><p>Da mir dieses Problem zu gross war, habe ich zuerst in einem Seperaten Dokument gearbeitet. </p><ul><li>Vorgehensweise:</li><li><ol><li>Simple Liste erstellen </li></ol></li><li><ol start="2"><li>Für jeden einzelnen Wert in den Zeilen wiederholen </li></ol></li><li><ol start="3"><li>Falls oberste Zeile, zufallszahl einfügen </li></ol></li><li><ol start="4"><li>mithilfe des Indexes werte von Feldern überschreiben</li></ol></li><li><ol start="5"><li>Für jede Zeile wiederholen </li></ol></li></ul><p>Ich habe noch keine bessere Option dafür gefunden als das Programm für jede Zele zu wiederholen, da ich keine gute möglichkeit hatte zu überprüfen ob es keine Leeren felder auf dem Spielfeld gibt. </p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">field </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># 1.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">save </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> random</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">numbers </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fieldrearrange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">     </span><span class="token comment" style="color:rgb(98, 114, 164)"># 5. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> x </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> y </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> x </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)"># 2. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> y </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&lt;=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">                            </span><span class="token comment" style="color:rgb(98, 114, 164)"># 3. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">choice</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">numbers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)"># 4. </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        save </span><span class="token operator">=</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> save</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        save </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fieldrearrange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>Schwierigkeiten des Projektes:</h1><p>Da dies mein erstes grösseres Programmier-projekt war, hatte ich so einige Schwierigkeiten, welche sich aus verschiedensten Faktoren zusammensetzen. Das nicht vertraut sein mit Python oder VSC, oder das simple überfodert sein aufgrund fehlender kreativität zur umsetzung. Meiner meinung nach war meine grösste Schwierigkeit/Problematik dieses Projektes mein Zeitmanagement. Ich habe gelernt, dass wenn man selbst gut im Zeitpaln liegt schnell zurückfallen kann wenn man nach dem Konzept von <strong>try and error</strong> arbeitet. Es kann schnell passieren, dass man nicht das sich gesetzte Ziel erreicht und sich eine Lösung findet. Ich habe mich bei diesem Projekt mehrmals erwischt wie ich etwas für 30-45min ausprobiert habe und es schlussendlich wieder komplett verworfen habe, da ich eine andere herangehensweise für besser hielt. Das ganze ist im grunde auch nicht so Problematisch, wenn da ich relativ viel spass bei der Arbeit hatte. Jedoch kann das ganze problematisch werden, wenn man sich daurch in der Zeit verkalkuliert oder verliert.                                                                                                    </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meine-tipps-an-dich">Meine Tipps an dich:<a class="hash-link" href="#meine-tipps-an-dich" title="Direkter Link zur Überschrift">​</a></h2><ul><li><strong>Tipps im Allgeminen</strong><ul><li>Tausche dich mit anderen aus</li><li>frage bei deinen Lehrern/Mitschülern nach</li><li>Falls du noch nicht so erfahren bist und es nicht auf Anhieb funktioniert, lass dich dadurch nicht Frustrieren und Arbeite an einem anderen Tag weiter</li></ul></li><li><strong>Tipps spezifisch für dieses Projekt:</strong><ul><li>Lies dir die Theorie für 2-Dimensionale Listen in Python nochmals durch </li><li>Versuche dich an die empfohlene/vorgegebe Struckturierung zu halten</li></ul></li></ul>]]></content>
    </entry>
</feed>